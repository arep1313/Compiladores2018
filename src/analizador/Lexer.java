/* The following code was generated by JFlex 1.4.3 on 30/08/18 06:17 PM */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/08/18 06:17 PM from the specification file
 * <tt>C:/Users/betic/Documents/URL/8vo Ciclo/Compiladores/analizadorLexico2-Java/src/analizador/minicsharp.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\5\2\0\1\4\22\0\1\4\1\56\1\14\2\0"+
    "\1\52\1\57\1\0\1\64\1\65\1\13\1\20\1\61\1\21\1\15"+
    "\1\12\1\6\11\2\1\0\1\60\1\53\1\54\1\55\2\0\1\50"+
    "\3\11\1\17\1\11\7\1\1\47\11\1\1\7\2\1\1\62\1\0"+
    "\1\63\1\0\1\1\1\0\1\27\1\37\1\41\1\35\1\25\1\26"+
    "\1\40\1\42\1\34\1\1\1\46\1\30\1\43\1\36\1\33\1\44"+
    "\1\1\1\23\1\31\1\22\1\24\1\32\1\45\1\10\1\51\1\1"+
    "\1\66\1\16\1\3\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\1\1\10\1\1\1\11\1\12\15\2\1\13"+
    "\1\14\1\15\1\16\1\17\1\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\0\1\32\1\33\11\2\1\34\11\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\0\1\45"+
    "\2\0\6\2\1\46\2\2\1\47\7\2\1\50\1\0"+
    "\1\30\1\51\1\52\2\2\1\53\1\2\1\54\3\2"+
    "\1\55\1\2\1\56\11\2\1\57\1\60\1\61\1\2"+
    "\1\62\1\2\1\63\2\2\1\64\1\2\1\65\5\2"+
    "\1\66\1\67\1\2\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\67\0\334\0\u0113"+
    "\0\67\0\u014a\0\67\0\u0181\0\67\0\67\0\u01b8\0\u01ef"+
    "\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\67\0\u0483\0\u04ba\0\u04f1\0\u0528"+
    "\0\u055f\0\67\0\67\0\u0596\0\67\0\u05cd\0\67\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u014a\0\u014a\0\67\0\u0717"+
    "\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf"+
    "\0\156\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0af5\0\u0672\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\156\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\67\0\156\0\156\0\u0f78\0\u0faf\0\156\0\u0fe6"+
    "\0\156\0\u101d\0\u1054\0\u108b\0\156\0\u10c2\0\156\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\156\0\156\0\156\0\u12e8\0\156\0\u131f\0\156\0\u1356"+
    "\0\u138d\0\156\0\u13c4\0\156\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\156\0\156\0\u150e\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\3\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\22\2\3\1\23\1\24\1\3"+
    "\1\25\1\26\1\27\1\30\1\3\1\31\3\3\1\32"+
    "\1\3\1\33\2\3\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\70\0\2\3\3\0\4\3\5\0\1\3\2\0\30\3"+
    "\17\0\1\4\3\0\1\4\6\0\1\51\53\0\1\4"+
    "\3\0\1\4\2\52\4\0\1\51\63\0\1\53\1\54"+
    "\53\0\5\55\1\0\6\55\1\56\52\55\16\0\1\57"+
    "\51\0\2\3\3\0\4\3\5\0\1\3\2\0\1\3"+
    "\1\60\16\3\1\61\7\3\16\0\2\3\3\0\4\3"+
    "\5\0\1\3\2\0\3\3\1\62\24\3\16\0\2\3"+
    "\3\0\2\3\1\63\1\3\5\0\1\3\2\0\6\3"+
    "\1\64\21\3\16\0\2\3\3\0\4\3\5\0\1\3"+
    "\2\0\5\3\1\65\3\3\1\66\16\3\16\0\2\3"+
    "\3\0\4\3\5\0\1\3\2\0\1\67\27\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\11\3\1\70"+
    "\16\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\4\3\1\71\7\3\1\72\4\3\1\73\6\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\11\3\1\74"+
    "\16\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\2\3\1\75\25\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\1\3\1\76\7\3\1\77\16\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\6\3\1\100"+
    "\21\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\20\3\1\101\7\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\3\3\1\102\24\3\71\0\1\103\66\0"+
    "\1\104\66\0\1\105\66\0\1\106\71\0\1\107\72\0"+
    "\1\110\70\0\1\111\4\0\1\112\65\0\1\51\3\0"+
    "\1\51\7\0\2\113\5\0\1\113\43\0\1\114\3\0"+
    "\1\114\2\0\1\114\5\0\1\114\5\0\3\114\5\0"+
    "\1\114\1\0\1\114\1\0\1\114\6\0\1\114\16\0"+
    "\5\53\1\0\61\53\12\54\1\115\1\116\53\54\1\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\2\3\1\117"+
    "\25\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\12\3\1\120\15\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\1\121\27\3\16\0\2\3\3\0\4\3"+
    "\5\0\1\3\2\0\1\122\27\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\7\3\1\123\20\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\6\3\1\124"+
    "\21\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\1\3\1\125\26\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\1\3\1\126\26\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\12\3\1\127\15\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\1\130\27\3"+
    "\16\0\2\3\3\0\4\3\5\0\1\3\2\0\22\3"+
    "\1\131\5\3\16\0\2\3\3\0\4\3\5\0\1\3"+
    "\2\0\2\3\1\132\25\3\16\0\2\3\3\0\4\3"+
    "\5\0\1\3\2\0\6\3\1\133\21\3\16\0\2\3"+
    "\3\0\4\3\5\0\1\3\2\0\3\3\1\134\24\3"+
    "\16\0\2\3\3\0\4\3\5\0\1\3\2\0\11\3"+
    "\1\135\16\3\16\0\2\3\3\0\4\3\5\0\1\3"+
    "\2\0\5\3\1\136\22\3\16\0\2\3\3\0\4\3"+
    "\5\0\1\3\2\0\12\3\1\137\15\3\16\0\2\3"+
    "\3\0\4\3\5\0\1\3\2\0\23\3\1\140\4\3"+
    "\17\0\1\51\3\0\1\51\11\0\2\141\45\0\13\115"+
    "\1\116\65\115\1\142\1\116\53\115\1\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\3\3\1\143\24\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\7\3\1\144"+
    "\20\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\2\3\1\145\25\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\3\3\1\146\24\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\3\3\1\147\24\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\7\3\1\117"+
    "\20\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\12\3\1\150\15\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\13\3\1\151\14\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\3\3\1\152\24\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\6\3\1\153"+
    "\21\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\15\3\1\154\12\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\6\3\1\155\21\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\5\3\1\156\22\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\6\3\1\157"+
    "\21\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\7\3\1\160\20\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\6\3\1\161\21\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\26\3\1\162\1\3\17\0"+
    "\1\51\3\0\1\51\61\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\1\3\1\163\26\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\14\3\1\164\13\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\14\3\1\165"+
    "\13\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\1\3\1\166\26\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\3\3\1\167\24\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\6\3\1\170\21\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\24\3\1\171"+
    "\3\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\7\3\1\172\20\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\3\3\1\173\24\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\1\3\1\174\26\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\14\3\1\175"+
    "\13\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\13\3\1\176\14\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\16\3\1\177\11\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\4\3\1\200\23\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\21\3\1\201"+
    "\6\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\3\3\1\202\24\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\1\3\1\203\26\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\7\3\1\204\20\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\5\3\1\205"+
    "\22\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\3\3\1\206\24\3\16\0\2\3\3\0\4\3\5\0"+
    "\1\3\2\0\5\3\1\207\22\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\17\3\1\210\10\3\16\0"+
    "\2\3\3\0\4\3\5\0\1\3\2\0\14\3\1\211"+
    "\13\3\16\0\2\3\3\0\4\3\5\0\1\3\2\0"+
    "\27\3\1\212\16\0\2\3\3\0\4\3\5\0\1\3"+
    "\2\0\3\3\1\213\24\3\16\0\2\3\3\0\4\3"+
    "\5\0\1\3\2\0\1\214\27\3\16\0\2\3\3\0"+
    "\4\3\5\0\1\3\2\0\7\3\1\215\20\3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5445];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\11\15\1\1\11\5\1\2\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\23\1\10\11\1\0\1\1\2\0\22\1\1\0\1\11"+
    "\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int linea(){return yyline;}
    public int column() {return yycolumn;}
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return ID;
          }
        case 57: break;
        case 52: 
          { lexeme=yytext(); return DOUBLE;
          }
        case 58: break;
        case 39: 
          { lexeme=yytext(); return INT;
          }
        case 59: break;
        case 18: 
          { lexeme=yytext();return ICORCH;
          }
        case 60: break;
        case 19: 
          { lexeme=yytext();return FCORCH;
          }
        case 61: break;
        case 29: 
          { lexeme=yytext();return MENORIGUAL;
          }
        case 62: break;
        case 3: 
          { lexeme=yytext(); return ENTERO;
          }
        case 63: break;
        case 43: 
          { lexeme=yytext(); return ELSE;
          }
        case 64: break;
        case 25: 
          { lexeme="Error, no se han cerrado los comentarios."; return null;
          }
        case 65: break;
        case 40: 
          { lexeme=yytext(); return NEW;
          }
        case 66: break;
        case 44: 
          { lexeme=yytext(); return VOID;
          }
        case 67: break;
        case 16: 
          { lexeme=yytext();return FIN;
          }
        case 68: break;
        case 34: 
          { lexeme=yytext();return CORCHETESC;
          }
        case 69: break;
        case 9: 
          { lexeme=yytext();return OMAS;
          }
        case 70: break;
        case 21: 
          { lexeme=yytext();return FPAR;
          }
        case 71: break;
        case 7: 
          { lexeme=yytext();return OMULT;
          }
        case 72: break;
        case 4: 
          { lexeme=yytext();return FCORCH2;
          }
        case 73: break;
        case 50: 
          { lexeme=yytext(); return RETURN;
          }
        case 74: break;
        case 46: 
          { lexeme=yytext(); return BOOL;
          }
        case 75: break;
        case 38: 
          { lexeme=yytext(); return FOR;
          }
        case 76: break;
        case 28: 
          { lexeme=yytext(); return IF;
          }
        case 77: break;
        case 10: 
          { lexeme=yytext();return OMENOS;
          }
        case 78: break;
        case 53: 
          { lexeme=yytext(); return EXTENDS;
          }
        case 79: break;
        case 8: 
          { lexeme=yytext();return PUNTO;
          }
        case 80: break;
        case 20: 
          { lexeme=yytext();return IPAR;
          }
        case 81: break;
        case 14: 
          { lexeme=yytext();return MAYOR;
          }
        case 82: break;
        case 51: 
          { lexeme=yytext(); return STRING;
          }
        case 83: break;
        case 24: 
          { return COMENTARIO;
          }
        case 84: break;
        case 13: 
          { lexeme=yytext();return ASIG;
          }
        case 85: break;
        case 22: 
          { lexeme=yytext();return ICORCH2;
          }
        case 86: break;
        case 27: 
          { lexeme=yytext();return OR;
          }
        case 87: break;
        case 32: 
          { lexeme=yytext();return NOIGUAL;
          }
        case 88: break;
        case 48: 
          { lexeme=yytext(); return CLASS;
          }
        case 89: break;
        case 6: 
          { lexeme=yytext();return ODIV;
          }
        case 90: break;
        case 54: 
          { lexeme=yytext(); return NEWA;
          }
        case 91: break;
        case 36: 
          { lexeme=yytext();return CORCHETES;
          }
        case 92: break;
        case 35: 
          { lexeme=yytext();return PARENTESIS;
          }
        case 93: break;
        case 49: 
          { lexeme=yytext(); return WHILE;
          }
        case 94: break;
        case 30: 
          { lexeme=yytext();return IGUAL;
          }
        case 95: break;
        case 55: 
          { lexeme=yytext(); return INTERFACE;
          }
        case 96: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 97: break;
        case 37: 
          { lexeme=yytext(); return HEXADECIMAL;
          }
        case 98: break;
        case 26: 
          { lexeme=yytext(); return CADENA;
          }
        case 99: break;
        case 47: 
          { lexeme=yytext(); return BREAK;
          }
        case 100: break;
        case 17: 
          { lexeme=yytext();return COMA;
          }
        case 101: break;
        case 11: 
          { lexeme=yytext();return OPORC;
          }
        case 102: break;
        case 33: 
          { lexeme=yytext();return AND;
          }
        case 103: break;
        case 12: 
          { lexeme=yytext();return MENOR;
          }
        case 104: break;
        case 56: 
          { lexeme=yytext(); return IMPLEMENTS;
          }
        case 105: break;
        case 45: 
          { lexeme=yytext(); return NULL;
          }
        case 106: break;
        case 5: 
          { /*Ignore*/
          }
        case 107: break;
        case 15: 
          { lexeme=yytext();return NEGACION;
          }
        case 108: break;
        case 41: 
          { lexeme=yytext(); return BOOLEAN;
          }
        case 109: break;
        case 23: 
          { lexeme=yytext(); return CDOUBLE;
          }
        case 110: break;
        case 31: 
          { lexeme=yytext();return MAYORIGUAL;
          }
        case 111: break;
        case 42: 
          { lexeme=yytext(); return THIS;
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
